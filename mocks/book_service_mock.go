// Code generated by MockGen. DO NOT EDIT.
// Source: book_service.go
//
// Generated by this command:
//
//	mockgen -source=book_service.go -destination=../mocks/book_service_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/brandoniu/lets-go/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBookService) AddBook(b *models.Book) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", b)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBookServiceMockRecorder) AddBook(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookService)(nil).AddBook), b)
}

// GetAllBooks mocks base method.
func (m *MockBookService) GetAllBooks() ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks")
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookServiceMockRecorder) GetAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookService)(nil).GetAllBooks))
}

// GetBookByID mocks base method.
func (m *MockBookService) GetBookByID(id int64) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockBookServiceMockRecorder) GetBookByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBookService)(nil).GetBookByID), id)
}

// RemoveBook mocks base method.
func (m *MockBookService) RemoveBook(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBook indicates an expected call of RemoveBook.
func (mr *MockBookServiceMockRecorder) RemoveBook(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBook", reflect.TypeOf((*MockBookService)(nil).RemoveBook), id)
}

// UpdateBook mocks base method.
func (m *MockBookService) UpdateBook(b *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceMockRecorder) UpdateBook(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookService)(nil).UpdateBook), b)
}
